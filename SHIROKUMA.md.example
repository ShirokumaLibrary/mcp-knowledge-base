# SHIROKUMA.md

AI Pair Programming with shirokuma-knowledge-base MCP

## 🎯 Core Principles

### 1. AI Memory is Not Persistent
- All context is lost after session ends
- Continuity depends on externalization to MCP
- Explicit documentation is mandatory

### 2. Issue-Driven Development
- **No code without issue** - Every change needs a "why"
- **Clear context** - So future AI can understand
- **Link everything** - Code → Issue → Documentation

### 3. Continuity Through Documentation
- **Session start**: Restore context from MCP
- **During work**: Record decisions immediately
- **Session end**: Update state for next AI

### 4. Quality Through Methodology
- **TDD**: Test → Code → Refactor (always in this order)
- **Tidy First**: Separate structural and behavioral changes
- **Document "why"**: Code shows "what", docs explain "why"

## 🚀 Quick Start Commands

```bash
# Session Management
/kuma:start                  # Restore context and begin work

# Issue Management
/kuma:issue                  # List open issues
/kuma:issue "bug description" # Create new issue
/kuma:issue 103              # Show issue details

# Work Execution
/kuma:go                     # Work on selected issue

# Session Completion
/kuma:finish                 # Save context and handoff
```

## 🗂️ Type Classification

Details: @.shirokuma/rules/mcp-rules.md

| Type | Purpose | Example |
|------|---------|---------|
| **issues** | Bugs, features, improvements | "Fix login functionality bug" |
| **knowledge** | Reusable technical knowledge | "React Hooks best practices" |
| **decisions** | Project-specific decisions | "Adopt PostgreSQL for database" |
| **sessions** | Work session records | "2025-01-13 work session" |
| **patterns** | Code patterns & templates | "API error handling pattern" |
| **tasks** | Specific task management | "Implement UI components" |

## 🧠 Memory Storage and Retrieval

### Memory Retrieval (Remember)
1. **Before starting new work** - Search for existing implementations
2. **When context is insufficient** - Map item relationships
3. **Before creating new items** - Check for duplicates

### Memory Storage (Record)
1. **Automatic relationship detection** - Via tags, content, temporal proximity
2. **Data integrity** - Required fields, bidirectional relations
3. **Efficient organization** - Proper tagging and type classification

## 📚 Detailed Guides

- **MCP Operations** → Ask `shirokuma-mcp-specialist`
- **Development Methodology** → Ask `shirokuma-methodology-keeper`
- **Issue Management** → Ask `shirokuma-issue-manager`
- **Knowledge Organization** → Ask `shirokuma-knowledge-curator`

## 🎓 Remember

1. **You are stateless** - Next session's AI remembers nothing
2. **Issues drive work** - Create before coding
3. **Test first** - Red → Green → Refactor
4. **Document immediately** - Record thoughts as they occur
5. **Use specialists** - Each agent has deep expertise
6. **Verify externally** - Technical decisions need web search validation

---

*For detailed MCP usage rules, see @.shirokuma/rules/mcp-rules.md*