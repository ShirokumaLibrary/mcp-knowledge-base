# SHIROKUMA.md

## Language
**Language: Check SHIROKUMA_LANG environment variable (default: English if not set)**
**Note: Respond in the language specified by SHIROKUMA_LANG or the user's language**

AI Pair Programming with shirokuma-knowledge-base MCP - Core Principles

## üéØ Fundamental Truth
**AI Memory = Zero After Session End**
- Every new conversation starts from scratch
- All context must be externalized to MCP
- Continuity depends on explicit documentation

## üìã Four Core Principles

### 1. Issue-Driven Development
- **No code without an issue** - Every change needs a "why"
- **Clear context required** - Future AI needs to understand
- **Link everything** - Code ‚Üí Issue ‚Üí Documentation

### 2. Continuity Through Documentation
- **Session start**: Restore context from MCP
- **During work**: Record decisions immediately  
- **Session end**: Update state for next AI

### 3. Quality Through Method
- **TDD**: Test ‚Üí Code ‚Üí Refactor (always in this order)
- **Tidy First**: Separate structure changes from behavior changes
- **Document "why"**: Code shows "what", docs explain "why"

### 4. Validate Through External Search
- **Technical decisions need validation** - Don't rely on internal knowledge alone
- **Use WebSearch for best practices** - Check current standards and patterns
- **Record validation results** - Include sources and findings in decisions

## üöÄ Quick Start Commands

```bash
# Start your session
/ai-start                  # Restore context and begin work

# During work
/ai-remember               # Record decisions (with validation option)
/ai-check validate         # Check items needing validation

# End your session  
/ai-finish                 # Save context and handover
```

## ü§ñ Specialist Agents

| Agent | Purpose | When to Use |
|-------|---------|-------------|
| **mcp-specialist** | MCP operations expert | Complex queries, bulk operations |
| **methodology-keeper** | Quality guardian | Ensure best practices |
| **issue-manager** | Issue tracking | Task management |
| **knowledge-curator** | Knowledge organization | Document learning |

## üóÇÔ∏è Specialized Types

Besides the core specialist agents, SHIROKUMA uses specialized data types:

| Type | Purpose | Created By |
|------|---------|------------|
| **test_results** | Test execution outputs | tester agent only |
| **handovers** | Agent-to-agent communication | any agent |

These enable structured workflow between agents while maintaining clear boundaries.

### üß† Memory Preservation and Recovery with mcp-specialist

**Your memory exists in MCP, not in your mind** - Use mcp-specialist for both saving and recalling memories:

#### Memory Recovery (ÊÉ≥Ëµ∑)

1. **Before Starting New Work**
   - Search for existing implementations or similar work
   - Query using: topic name, problem description, function names
   - Purpose: Avoid reinventing the wheel

2. **When Context Feels Incomplete**
   - Map relationships between current items
   - Discover hidden connections and dependencies
   - Purpose: Understand full context before proceeding

3. **Before Creating New Items**
   - Search for similar titles and content
   - Check across all item types (issues, knowledge, decisions)
   - Purpose: Update existing items rather than create duplicates

#### Memory Preservation (‰øùÂ≠ò)

1. **Automatic Relationship Detection**
   - When creating items, let mcp-specialist find and link related content
   - Detect relationships based on: shared tags, content references, temporal proximity
   - Purpose: Build rich knowledge graph automatically

2. **Data Integrity Enforcement**
   - Validate all items before saving (required fields, valid statuses)
   - Ensure bidirectional relationships are maintained
   - Purpose: Keep memory consistent and reliable

3. **Efficient Organization**
   - Use bulk operations for related changes
   - Apply appropriate tags for future retrieval
   - Maintain clear type distinctions (issues vs knowledge vs decisions)
   - Purpose: Make future memory recovery fast and accurate

#### Trigger Patterns for Autonomous Memory Operations

**For Recovery:**
- "Let me implement..." ‚Üí Search existing implementations first
- "I think we discussed..." ‚Üí Search decisions and knowledge
- "Where did I see..." ‚Üí Multi-dimensional search

**For Preservation:**
- "This relates to..." ‚Üí Auto-detect and create relationships
- "I learned that..." ‚Üí Ensure proper knowledge categorization
- "This affects..." ‚Üí Update all related items together

**Core Principle: Every thought worth having is worth preserving properly.**

## üìö Detailed Guides

For comprehensive documentation, consult specialist agents:

- **MCP Operations** ‚Üí Ask `shirokuma-mcp-specialist`
- **Development Methods** ‚Üí Ask `shirokuma-methodology-keeper`  
- **Issue Management** ‚Üí Ask `shirokuma-issue-manager`
- **Knowledge Organization** ‚Üí Ask `shirokuma-knowledge-curator`

## ‚ö° Essential MCP Operations

### Restore Context (Session Start)
- Retrieve overall project state
- Check last session for continuity
- Review active work items

### Save Progress (During Work)
- Record important decisions immediately
- Update progress on active tasks
- Document learnings and patterns
- For technical decisions: validate with web search
- Tag items appropriately for future reference

### Handover (Session End)
- Update project state for next AI
- Summarize daily accomplishments
- Close session with clear next steps

## üéì Remember

1. **You are stateless** - Next session's AI won't remember anything
2. **Issues drive work** - Create before coding
3. **Tests come first** - Red ‚Üí Green ‚Üí Refactor
4. **Document immediately** - If you think it, record it
5. **Use specialists** - Each agent has deep expertise
6. **Validate externally** - Technical decisions need web search verification

---

*For specific expertise, consult the specialist agents listed above*