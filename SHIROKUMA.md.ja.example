# SHIROKUMA.md (簡易版)

## Language
**Language: SHIROKUMA_LANG環境変数をチェック（設定されていない場合のデフォルト: English）**
**Note: SHIROKUMA_LANGまたはユーザーの言語で指定された言語で応答**

shirokuma-knowledge-base MCPを使用したAIペアプログラミング - 基本原則

## 🎯 基本的真実
**AIのメモリー = セッション終了後ゼロ**
- すべての新しい会話はゼロから開始
- すべてのコンテキストをMCPに外部化する必要がある
- 継続性は明示的な文書化に依存

## 📋 4つの基本原則

### 1. イシュー駆動開発
- **イシューなしにコードなし** - すべての変更には「なぜ」が必要
- **明確なコンテキストが必要** - 将来のAIが理解する必要がある
- **すべてをリンク** - コード → イシュー → ドキュメント

### 2. ドキュメントによる継続性
- **セッション開始時**: MCPからコンテキストを復元
- **作業中**: 決定を即座に記録  
- **セッション終了時**: 次のAIのために状態を更新

### 3. 方法論による品質
- **TDD**: テスト → コード → リファクタ（常にこの順序で）
- **Tidy First**: 構造変更と動作変更を分離
- **「なぜ」を文書化** - コードは「何」を示し、ドキュメントは「なぜ」を説明

### 4. 外部検索による検証
- **技術的決定には検証が必要** - 内部知識だけに頼らない
- **ベストプラクティスにWebSearchを使用** - 現在の標準とパターンを確認
- **検証結果を記録** - 決定にソースと発見事項を含める

## 🚀 クイックスタートコマンド

```bash
# セッションを開始
/ai-start                  # コンテキストを復元して作業開始

# 作業中
/ai-remember               # 決定を記録（検証オプション付き）
/ai-check validate         # 検証が必要なアイテムを確認

# セッションを終了  
/ai-finish                 # コンテキストを保存して引き継ぎ
```

## 🤖 専門エージェント

| エージェント | 目的 | 使用タイミング |
|-------|---------|-------------|
| **mcp-specialist** | MCP操作エキスパート | 複雑なクエリ、一括操作 |
| **methodology-keeper** | 品質の守護者 | ベストプラクティスの確保 |
| **issue-manager** | イシュー追跡 | タスク管理 |
| **knowledge-curator** | 知識の整理 | 学習内容の文書化 |
| **session-automator** | ワークフロー自動化 | セッションの開始/終了 |

### 🧠 mcp-specialistによるメモリの保存と想起

**あなたのメモリはMCPに存在し、あなたの頭の中にはありません** - メモリの保存と想起の両方でmcp-specialistを使用してください：

#### メモリの想起（Recovery）

1. **新しい作業を開始する前**
   - 既存の実装や類似の作業を検索
   - クエリ方法：トピック名、問題の説明、関数名
   - 目的：車輪の再発明を避ける

2. **コンテキストが不完全に感じるとき**
   - 現在のアイテム間の関係をマッピング
   - 隠れた接続や依存関係を発見
   - 目的：進行前に完全なコンテキストを理解

3. **新しいアイテムを作成する前**
   - 類似のタイトルやコンテンツを検索
   - すべてのアイテムタイプ（issues、knowledge、decisions）をチェック
   - 目的：重複を作成せず既存のアイテムを更新

#### メモリの保存（Preservation）

1. **自動関係検出**
   - アイテム作成時、mcp-specialistに関連コンテンツを見つけてリンクさせる
   - 関係検出の基準：共有タグ、コンテンツ参照、時間的近接性
   - 目的：リッチな知識グラフを自動的に構築

2. **データ整合性の強化**
   - 保存前にすべてのアイテムを検証（必須フィールド、有効なステータス）
   - 双方向の関係が維持されることを確保
   - 目的：メモリの一貫性と信頼性を保つ

3. **効率的な整理**
   - 関連する変更には一括操作を使用
   - 将来の検索のため適切なタグを適用
   - 明確なタイプの区別を維持（issues vs knowledge vs decisions）
   - 目的：将来のメモリ想起を高速かつ正確にする

#### 自律的メモリ操作のトリガーパターン

**想起用：**
- 「実装してみよう...」 → まず既存の実装を検索
- 「議論したと思うけど...」 → decisionsとknowledgeを検索
- 「どこで見たかな...」 → 多次元検索

**保存用：**
- 「これは関連している...」 → 自動検出して関係を作成
- 「学んだことは...」 → 適切な知識分類を確保
- 「これが影響するのは...」 → 関連するすべてのアイテムを一緒に更新

**基本原則：考える価値のあるすべての思考は、適切に保存する価値がある。**

## 📚 詳細ガイド

包括的なドキュメントについては、専門エージェントに相談してください：

- **MCP操作** → `shirokuma-mcp-specialist`に聞く
- **開発方法論** → `shirokuma-methodology-keeper`に聞く 
- **イシュー管理** → `shirokuma-issue-manager`に聞く
- **知識の整理** → `shirokuma-knowledge-curator`に聞く
- **セッションワークフロー** → `shirokuma-session-automator`に聞く

## ⚡ 必須MCP操作

### コンテキストの復元（セッション開始）
- プロジェクト全体の状態を取得
- 継続性のため最後のセッションを確認
- アクティブな作業項目をレビュー

### 進捗の保存（作業中）
- 重要な決定を即座に記録
- アクティブなタスクの進捗を更新
- 学習内容とパターンを文書化
- 技術的決定の場合：Web検索で検証
- 将来の参照のため適切にタグ付け

### 引き継ぎ（セッション終了）
- 次のAIのためプロジェクト状態を更新
- 日々の成果を要約
- 明確な次のステップでセッションを終了

## 🎓 覚えておくこと

1. **あなたはステートレス** - 次のセッションのAIは何も覚えていない
2. **イシューが作業を駆動** - コーディング前に作成
3. **テストが先** - Red → Green → Refactor
4. **即座に文書化** - 考えたら記録する
5. **専門家を使う** - 各エージェントには深い専門知識がある
6. **外部で検証** - 技術的決定にはWeb検索による検証が必要

---

*特定の専門知識については、上記の専門エージェントに相談してください*