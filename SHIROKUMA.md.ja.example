# SHIROKUMA.md

AIペアプログラミングのためのshirokuma-knowledge-base MCP活用法

## 🤝 AIペアプログラミングの基本原則

### なぜ細かい記録が必要か
**AIの根本的制約**: セッション終了 = 完全な記憶喪失
- AIは前回の会話内容を一切覚えていない
- 今実装している機能の目的も忘れている
- 直前まで議論していた技術的決定も消失
- そのため、すべてをMCPに外部化して保存する必要がある

### AIとの効果的な対話法
1. **明確なコンテキスト提供**: 「今、XXX機能を実装中でYYYの問題に直面」
2. **具体的な指示**: 「ZZZファイルのAAA関数を修正」
3. **期待結果の明示**: 「エラーが解消してテストが通ること」

## 📋 セッション管理プロトコル

### AIセッション開始時の必須手順
**重要**: AIは何も覚えていないため、慎重にコンテキストを回復する

1. **前回の記憶を取り戻す**
   
   全体状況を把握:
   ```
   mcp__shirokuma-knowledge-base__get_current_state()
   ```
   
   アクティブイシュー確認:
   ```
   mcp__shirokuma-knowledge-base__get_items({ 
     type: "issues", 
     statuses: ["In Progress"],
     includeClosedStatuses: false 
   })
   ```

2. **新セッション作成（前回からの継続情報を含める）**
   
   AIの記憶補助のため継続情報を含めてセッション作成:
   ```
   mcp__shirokuma-knowledge-base__create_item({
     type: "sessions",
     title: "【タスク名】の実装",
     content: "前回の続き: 【何をしていたか】",
     related_tasks: ["issues-XX"]
   })
   ```


### AIセッション終了時の必須事項

#### セッション要約の更新（次回のAIが理解できるように）

明確なセクションでセッション更新を構造化:
```
mcp__shirokuma-knowledge-base__update_item({
  type: "sessions",
  id: currentSessionId,
  content: `## 完了
- 【具体的な成果】

## 技術的決定
- 【なぜその決定をしたか含む】

## 次回継続点
- 【どこから再開すべきか明記】`
})
```

#### デイリー更新（セッションごとに累積）

デイリーは初回セッションで作成、以降のセッションで更新。

**ステップ1: 今日の日付を取得し既存デイリーを確認**
```
本日の日付をYYYY-MM-DD形式で取得
その後:
mcp__shirokuma-knowledge-base__get_items({ 
  type: "dailies", 
  start_date: today, 
  end_date: today 
})
```

**ステップ2a: デイリーが存在しない場合（初回セッション）:**
```
mcp__shirokuma-knowledge-base__create_item({
  type: "dailies",
  date: today,
  title: "作業記録",
  content: `## セッション1
- 【完了内容】`,
  related_tasks: ["sessions-XX"]
})
```

**ステップ2b: デイリーが存在する場合（既存に追記）:**
```
まず詳細を取得:
mcp__shirokuma-knowledge-base__get_item_detail({ 
  type: "dailies", 
  id: dailies[0].id 
})

新しいセッションで更新:
mcp__shirokuma-knowledge-base__update_item({
  type: "dailies",
  id: daily.id,
  content: daily.content + `

## セッション${sessionNumber}
- 【完了内容】`,
  related_tasks: [...daily.related_tasks, "sessions-XX"]
})
```

#### プロジェクト状態更新（エッセンシャルのみ）

状態は最小限かつ情報的に:
```
mcp__shirokuma-knowledge-base__update_current_state({
  content: `## 今どこ
- 【現在の機能/フェーズ】

## 次何
- 【具体的な次のアクション】

## 注意
- 【技術的制約や重要な決定のみ】`,
  updated_by: "session-end"
})
```

## 💡 AIとのイシュー駆動開発

### AIに伝えやすいイシューの書き方
**重要**: AIが理解し、適切な解決策を提案できるように記述

```typescript
await create_item({
  type: "issues",
  title: "【具体的な機能/問題】を【動詞】",
  description: "簡潔な一文説明",
  priority: "medium",
  status: "Open",
  tags: ["enhancement"]
})
// 詳細はcontentは必要最小限に。対話中に口頭で補完
```

### イシュー詳細確認フロー
```typescript
// リストから詳細へのドリルダウン
const issues = await get_items({ type: "issues", includeClosedStatuses: false })
const detail = await get_item_detail({ type: "issues", id: issues[0].id })

// 関連情報を辿ってコンテキスト把握
for (const docId of detail.related_documents) {
  const doc = await get_item_detail({ 
    type: docId.split('-')[0], 
    id: parseInt(docId.split('-')[1]) 
  })
}
```

### イシュー分類
- **bug** / **feature** / **enhancement** / **idea** / **technical-debt** / **documentation**

### 優先度
- **high** / **medium** / **low**

### ステータス遷移
```
Open → In Progress → Closed
              ↓
          On Hold（保留）
```

### ステータス運用ルール
```typescript
// 使用可能ステータス一覧確認
const statuses = await get_statuses()

// ステータス別統計取得
const stats = {}
for (const status of statuses) {
  const items = await get_items({ 
    type: "issues", 
    statuses: [status.name],
    includeClosedStatuses: true 
  })
  stats[status.name] = items.length
}
```

## 📚 AIとの学習記録

### ナレッジ記録基準（AIの記憶補助として）
- **解決に時間がかかった問題** → 次回AIが即座に理解できるように
- **プロジェクト固有の制約** → AIが毎回聞き返さないように
- **技術的な決定理由** → AIが誤った提案をしないように

```typescript
// シンプルなパターン記録
await create_item({
  type: "knowledge",
  title: "【問題】の解決パターン",
  content: `## 問題\n【一文で】\n\n## 解決法\n【コードまたは手順】\n\n## 注意点\n【あれば】`,
  tags: ["pattern"]
})
```

### ドキュメント分類
- **ガイドライン** / **技術文書** / **決定事項** / **リリースノート**

## 📅 デイリー記録（累積型）

### 記録タイミング
- **各セッション終了時に更新**
- 一日の最初のセッションで作成
- 以降のセッションで内容を追記
- 一日の作業履歴が自然に蓄積

## 🎯 プロジェクト状態管理

### 更新コマンド
```typescript
mcp__shirokuma-knowledge-base__update_current_state({
  content: `## プロジェクト現状\n現在のフェーズ: XXX\n\n## アクティブタスク\n- [HIGH] issue-XX: YYY\n\n## 次の優先事項\n- ZZZ`,
  updated_by: "ai-milestone", // or "ai-start", "ai-finish"
  tags: ["milestone", "status-update"],
  related: ["issues-XX", "sessions-YY"]
})
```


## 🏷️ タグ管理

### ルール
- 全アイテムに最低1タグ必須
- 小文字英数字とハイフン（例: frontend-react）
- 単数形使用（bug, not bugs）

### タグ運用フロー
```typescript
// 1. 既存タグ確認→新タグ作成
const tags = await get_tags()
if (!tags.find(t => t.name === "new-feature")) {
  await create_tag({ name: "new-feature" })
}

// 2. タグ検索で関連アイテム取得
const items = await search_items_by_tag({ 
  tag: "bug",
  types: ["issues", "knowledge"] 
})

// 3. タグ名パターン検索（部分一致）
const frontendTags = await search_tags({ pattern: "frontend" })
```

### セッションカテゴリー（AIペアプロ用）
- **development**: 新機能実装、AIとの設計議論
- **debugging**: バグ修正、AIとの問題分析
- **refactoring**: コード改善、AIのレビュー反映
- **planning**: アーキテクチャ設計、AIとの戦略検討

## 🔗 関連付け必須ルール

- セッション → 作業対象のイシュー
- デイリー → 当日作業したイシュー/セッション
- ドキュメント → 関連するイシュー

```typescript
related_tasks: ["issues-1", "plans-2"]
related_documents: ["docs-3", "knowledge-4"]
```

## ✅ ベストプラクティス

1. **継続性確保**: AIの記憶喪失を前提とした情報設計
2. **current_state必須**: これがないと次回AIは何も分からない
3. **コンテキスト明記**: 「なぜ」と「どこから」を常に記録

## ⚠️ アンチパターン

### 避けるべき行動
- ❌ **過剰記録**: すべての対話を記録
- ❌ **詳細すぎるセッション**: 長文の議論内容
- ❌ **current_stateの更新忘れ**: 次回コンテキスト喪失
- ❌ **無関係な情報の記録**: 一時的な試行錯誤

### 削除の慎重な扱い

**削除前の確認フロー:**

1. アイテム詳細を取得:
```
mcp__shirokuma-knowledge-base__get_item_detail({ 
  type: "issues", 
  id: 123 
})
```

2. 削除前の条件確認:
- 関連タスクなし (related_tasks.length === 0)
- 関連ドキュメントなし (related_documents.length === 0)  
- ステータスが "Closed"

3. すべての条件を満たした場合:
```
mcp__shirokuma-knowledge-base__delete_item({ 
  type: "issues", 
  id: 123 
})
```


## 🔍 検索・フィルタリング

### 基本検索パターン

**全文検索:**
```
mcp__shirokuma-knowledge-base__search_items({ 
  query: "キーワード", 
  types: ["issues"], 
  limit: 20 
})
```

**日付フィルタ:**
```
mcp__shirokuma-knowledge-base__get_items({ 
  type: "sessions", 
  start_date: "2025-01-01", 
  end_date: "2025-01-31" 
})
```

**ステータスフィルタ:**
```
mcp__shirokuma-knowledge-base__get_items({ 
  type: "issues", 
  statuses: ["In Progress"], 
  includeClosedStatuses: false 
})
```

### インクリメンタル検索

**ステップ1: 検索サジェスト取得:**
```
mcp__shirokuma-knowledge-base__search_suggest({ 
  query: "auth",
  types: ["knowledge", "docs"],
  limit: 5 
})
```

**ステップ2: 選択したサジェストで完全検索:**
```
mcp__shirokuma-knowledge-base__search_items({ 
  query: [選択したサジェスト] 
})
```

## 🔎 コードベース検索（インデックス）

### 初回インデックス作成

コードベース全体をインデックス化（初回のみ必要）:
```
mcp__shirokuma-knowledge-base__index_codebase({ 
  force: false 
})
```

### セマンティック検索の使い所
- **自然言語での検索**: "認証処理を行っている場所" → 関連コードを発見
- **類似コード検索**: 実装パターンの重複を発見
- **影響範囲調査**: 変更が影響する関連ファイルを特定

**自然言語でコード検索:**
```
mcp__shirokuma-knowledge-base__search_code({ 
  query: "ユーザー認証の処理", 
  fileTypes: ["ts", "js"],
  limit: 10 
})
```

**特定ファイルの関連ファイル検索:**
```
mcp__shirokuma-knowledge-base__get_related_files({ 
  file: "src/auth/login.ts",
  depth: 2  
})
```

**インデックス状態確認:**
```
mcp__shirokuma-knowledge-base__get_index_status()
```

### インデックス更新タイミング
- 大規模リファクタリング後
- 新機能追加後
- 定期的なメンテナンス（週1回程度）

## 📋 カスタムタイプ

### タイプ管理フロー

**1. 既存タイプ確認:**
```
mcp__shirokuma-knowledge-base__get_types({ 
  include_definitions: true 
})
```

**2. プロジェクト固有タイプ作成:**
タイプが存在しない場合:
```
mcp__shirokuma-knowledge-base__create_type({ 
  name: "bugs", 
  base_type: "tasks", 
  description: "バグ報告用" 
})
```

**3. タイプ説明更新:**
```
mcp__shirokuma-knowledge-base__update_type({ 
  name: "bugs", 
  description: "バグ報告用 - 再現手順と環境情報必須" 
})
```

**4. 不要タイプ削除:**
まずアイテムが存在しないか確認:
```
mcp__shirokuma-knowledge-base__get_items({ 
  type: "old_bugs" 
})
```
アイテムがない場合 (length === 0):
```
mcp__shirokuma-knowledge-base__delete_type({ 
  name: "old_bugs" 
})
```

### タイプ移行フロー

タイプ間でアイテムを移行（ID変更、関連更新自動）:
```
mcp__shirokuma-knowledge-base__change_item_type({
  from_type: "issues",
  from_id: 123,
  to_type: "bugs"
})
```

## 🚀 AIペアプロ導入手順

### 1. 最小限の初期設定

**シンプルなプロジェクト概要作成:**
```
mcp__shirokuma-knowledge-base__create_item({ 
  type: "docs", 
  title: "プロジェクト概要",
  content: `## 何を作る
【一文で】

## 技術
【主要言語/FW】

## 制約
【重要なもののみ】`
})
```

**current_state初期化:**
```
mcp__shirokuma-knowledge-base__update_current_state({ 
  content: "プロジェクト開始" 
})
```

### 2. AI記憶喪失を前提としたセッションフロー
1. **開始**: current_stateで「今どこ？」を思い出す → セッション作成
2. **作業**: AIが次回必要な情報をissue/knowledgeに記録
3. **終了**: 「次何？」をcurrent_stateに明記 → デイリー累積

### 3. 週次レビューフロー

**統計情報取得:**
```
mcp__shirokuma-knowledge-base__get_statuses()
mcp__shirokuma-knowledge-base__get_tags()
```

**アーカイブ候補の古いClosedイシューを検索:**
```
mcp__shirokuma-knowledge-base__get_items({ 
  type: "issues", 
  statuses: ["Closed"],
  end_date: "30日前の日付"
})
```


## 📖 AIペアプロクイックリファレンス

### セッション開始時（AIは何も覚えていない）

**1. 前回までの記憶を取り戻す:**
```
mcp__shirokuma-knowledge-base__get_current_state()
mcp__shirokuma-knowledge-base__get_items({ type: "sessions", limit: 1 })
mcp__shirokuma-knowledge-base__get_items({ type: "issues", includeClosedStatuses: false })
mcp__shirokuma-knowledge-base__get_items({ type: "decisions" })
```

**2. セッション作成（継続情報を含める）:**
```
mcp__shirokuma-knowledge-base__create_item({ 
  type: "sessions", 
  title: "タスク名",
  content: "前回: XXXを完了。今回: YYYから開始"
})
```

### 作業中（必要時のみ）

**重要なタスクを記録:**
```
mcp__shirokuma-knowledge-base__create_item({ 
  type: "issues", 
  title: "具体的なタスク" 
})
```

**プロジェクト固有の決定事項:**
```
mcp__shirokuma-knowledge-base__create_item({ 
  type: "decisions", 
  title: "XXXはYYYする" 
})
```

**汎用的な知識（再利用可能）:**
```
mcp__shirokuma-knowledge-base__create_item({ 
  type: "knowledge", 
  title: "一般的な解決パターン" 
})
```

### セッション終了時（次回AIのために必ず実行）

**絶対必須 - current_state更新:**
```
mcp__shirokuma-knowledge-base__update_current_state({ 
  content: "今どこ: XXX完了\n次何: YYYから開始\n注意: ZZZに気を付ける" 
})
```

**デイリー更新（作業履歴を蓄積）:**

1. 今日のデイリーを取得:
```
mcp__shirokuma-knowledge-base__get_items({ 
  type: "dailies", 
  start_date: today, 
  end_date: today 
})
```

2a. デイリーが存在する場合、詳細を取得して追記:
```
mcp__shirokuma-knowledge-base__get_item_detail({ 
  type: "dailies", 
  id: dailies[0].id 
})

mcp__shirokuma-knowledge-base__update_item({ 
  type: "dailies", 
  id: daily.id, 
  content: daily.content + `\n\n## セッション${sessionNumber}\n- 【完了内容】` 
})
```

2b. デイリーが存在しない場合、作成:
```
mcp__shirokuma-knowledge-base__create_item({ 
  type: "dailies", 
  date: today, 
  title: "作業記録", 
  content: "## セッション1\n- 【完了内容】" 
})
```