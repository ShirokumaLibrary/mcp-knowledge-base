import type { Database } from './base.js';
import { BaseRepository } from './base.js';
import type { Status } from '../types/domain-types.js';
/**
 * @ai-context Repository for workflow status management
 * @ai-pattern Simple CRUD repository for status definitions
 * @ai-critical Statuses are referenced by ID - deletion can break referential integrity
 * @ai-lifecycle Statuses created at DB init, custom ones added by users
 * @ai-assumption Default statuses (1-6) should not be deleted
 */
export declare class StatusRepository extends BaseRepository {
    constructor(db: Database);
    /**
     * @ai-intent Retrieve all available workflow statuses
     * @ai-flow 1. Query all statuses -> 2. Map to typed objects -> 3. Return sorted by ID
     * @ai-performance Cached by UI layer - called frequently
     * @ai-return Always returns array, empty if table not initialized
     * @ai-why Ordered by ID to show default statuses first
     */
    getAllStatuses(): Promise<Status[]>;
    getAllStatusesAsync(): Promise<Status[]>;
    getStatus(id: number): Promise<Status | null>;
    /**
     * @ai-intent Create custom workflow status
     * @ai-flow 1. Insert with auto-increment ID -> 2. Return complete object
     * @ai-side-effects Adds to statuses table, ID generated by AUTOINCREMENT
     * @ai-error-handling Throws on duplicate names (UNIQUE constraint)
     * @ai-critical IDs 7+ are custom statuses that need preservation during rebuilds
     */
    createStatus(name: string, is_closed?: boolean): Promise<Status>;
    updateStatus(id: number, name: string, is_closed?: boolean): Promise<boolean>;
    /**
     * @ai-intent Remove status definition
     * @ai-flow 1. Execute DELETE -> 2. Check affected rows -> 3. Return success
     * @ai-critical Can break issues/plans using this status - no cascade delete
     * @ai-warning Should prevent deletion of default statuses (1-6) at app layer
     * @ai-return True if deleted, false if not found
     */
    deleteStatus(id: number): Promise<boolean>;
    /**
     * @ai-intent Get status by name
     * @ai-flow Query statuses table by name
     * @ai-return Status object or null if not found
     */
    getStatusByName(name: string): Promise<Status | null>;
    /**
     * @ai-intent Get status by ID (alias for getStatus)
     * @ai-flow Query statuses table by ID
     * @ai-return Status object or null if not found
     */
    getStatusById(id: number): Promise<Status | null>;
    /**
     * @ai-intent Get all closed status IDs
     * @ai-flow Query statuses where is_closed = 1
     * @ai-return Array of status IDs that are marked as closed
     */
    getClosedStatusIds(): Promise<number[]>;
}
