# Test Case 2.02: Post-Rebuild API Verification

**Prerequisites**: 
- Test Case 2.01 (Database Rebuild) must be completed
- MCP server must be restarted after rebuild
- Run this test immediately after server restart

## 2.02.1 Server Restart Request

### Request User Action
```
Action: Display message to user
Message: "Database rebuild complete (Test 2.01). 
         Please restart the MCP server connection now.
         After restart, we will verify all API operations work correctly."
Expected: User acknowledges and restarts server
```

---
**⚠️ WAIT FOR SERVER RESTART BEFORE PROCEEDING ⚠️**
---

## 2.02.2 Initial Connection Verification

### Confirm Server Connection
```
Tool: get_types
Expected: Successful response with type list
Note: This confirms the server is running and accepting connections
```

## 2.02.3 Read Operations Verification

### 2.02.3.1 List Items
```
Tool: get_items
Parameters: {type: "issues", limit: 5}
Expected: Returns issue list without errors
```

### 2.02.3.2 Get Specific Item
```
Tool: get_item_detail
Parameters: {type: "issues", id: 1}
Expected: 
- Original issue data intact
- Multi-line content preserved
- All fields present
```

### 2.02.3.3 Check Tags
```
Tool: get_tags
Expected: All tags from markdown files present
```

### 2.02.3.4 Check Statuses
```
Tool: get_statuses
Expected: Default statuses available
```

## 2.02.4 Write Operations Verification

### 2.02.4.1 Create New Item
```
Tool: create_item
Parameters: {
  type: "issues",
  title: "Post-Rebuild API Test",
  content: "Testing create operation after database rebuild\nThis verifies write operations work correctly",
  priority: "medium",
  status: "Open",
  tags: ["rebuild-test", "api-verification"]
}
Expected: 
- New issue created successfully
- Sequential ID assigned
- Note the ID for next tests
```

### 2.02.4.2 Update Item
```
Tool: update_item
Parameters: {
  type: "issues",
  id: [ID from previous step],
  content: "Updated after rebuild\nMulti-line content test",
  tags: ["rebuild-test", "updated"]
}
Expected: Update successful
```

### 2.02.4.3 Retrieve Updated Item
```
Tool: get_item_detail
Parameters: {type: "issues", id: [ID from create step]}
Expected: 
- Updated content present
- Tags changed correctly
- Other fields unchanged
```

## 2.02.5 Search Functionality Verification

### 2.02.5.1 Full-text Search
```
Tool: search_items
Parameters: {query: "rebuild"}
Expected: Finds the newly created issue
```

### 2.02.5.2 Tag Search
```
Tool: search_items_by_tag
Parameters: {tag: "rebuild-test"}
Expected: Returns the test issue created above
```

### 2.02.5.3 Search Existing Content
```
Tool: search_items
Parameters: {query: "authentication"}
Expected: Same results as before rebuild (if any existed)
```

## 2.02.6 Current State Verification

### 2.02.6.1 Get Current State
```
Tool: get_current_state
Expected: Returns current state (may be empty)
```

### 2.02.6.2 Update Current State
```
Tool: update_current_state
Parameters: {
  content: "Rebuild verification completed at: [timestamp]\nAll systems operational"
}
Expected: State updated successfully
```

### 2.02.6.3 Verify State Persistence
```
Tool: get_current_state
Expected: Returns the updated state content
```

## 2.02.7 Session Operations

### 2.02.7.1 Create New Session
```
Tool: create_item
Parameters: {
  type: "sessions",
  title: "Post-Rebuild Test Session",
  content: "Verifying session creation after rebuild"
}
Expected: Session created with timestamp ID
```

### 2.02.7.2 List Recent Sessions
```
Tool: get_items
Parameters: {type: "sessions", limit: 5}
Expected: Shows newly created session
```

## 2.02.8 Complex Operations

### 2.02.8.1 Create with Relations
```
Tool: create_item
Parameters: {
  type: "issues",
  title: "Related Items Test",
  content: "Testing related items",
  priority: "low",
  status: "Open",
  related_tasks: ["issues-1", "issues-2"],
  related_documents: ["docs-1"]
}
Expected: Created with relations intact
```

### 2.02.8.2 Verify Relations
```
Tool: get_item_detail
Parameters: {type: "issues", id: [ID from previous step]}
Expected: Related items arrays preserved
```

## 2.02.9 Final Verification

### 2.02.9.1 Database Integrity Check
```
Tool: get_items
Parameters: {type: "issues", includeClosedStatuses: true}
Expected: 
- All items from markdown files present
- No duplicates
- Correct total count
```

### 2.02.9.2 Delete Test Items
```
Tool: delete_item
Parameters: {
  type: "issues",
  id: [ID of "Post-Rebuild API Test"]
}
Expected: Deletion successful
```

## 2.02.10 Test Summary

### Success Criteria
- ✅ Server connection restored after restart
- ✅ All read operations return correct data
- ✅ Create operations assign correct sequential IDs
- ✅ Update operations modify data correctly
- ✅ Search index functioning properly
- ✅ Current state operations work
- ✅ Session creation with timestamp IDs works
- ✅ Related items preserved and functional
- ✅ Delete operations work correctly

### Completion Message
```
Status: Post-rebuild API verification complete
Result: All MCP operations verified working correctly
Database: Successfully rebuilt and fully operational
```