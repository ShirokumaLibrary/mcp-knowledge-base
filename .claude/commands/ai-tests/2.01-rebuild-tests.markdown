# Test Case 2: Database Rebuild Tests

Test database reconstruction from markdown files. **MUST BE RUN LAST**.

## 2.1 Pre-Rebuild Phase

### 2.1.1 Database Backup
```
Bash: cp .shirokuma/data/search.db .shirokuma/data/search.db.backup
Expected: Database file copied successfully
```

### 2.1.2 Record Current State
```
Tool: get_items
Parameters: {type: "issues", includeClosedStatuses: true}
Note: Record count and IDs

Tool: get_tags
Note: Record all tags

Tool: get_types
Note: Record custom types
```

### 2.1.3 Create Database Snapshot
```
Bash: .claude/tools/dump-database-details.sh .shirokuma/data/search.db > /tmp/db-before-rebuild.txt
Expected: Detailed database snapshot created
```

## 2.2 Rebuild Execution

### 2.2.1 Execute Rebuild

```
Bash: MCP_DATABASE_PATH=.shirokuma/data npm run rebuild-db
Expected: 
- "Starting database rebuild..."
- "Database rebuilt successfully"
- Count of items processed
```

### 2.2.2 SQLite Verification Phase
```
Bash: .claude/tools/compare-databases.sh
Expected:
- ✅ Schemas are identical
- ✅ Same number of items (or fewer if items were deleted)
- ⚠️ Missing tags (deleted tags not recreated)
- ✅ FTS indexes match item counts
- ✅ Content matches for sample items
```

### 2.2.3 Content Verification
```
Bash: .claude/tools/verify-rebuild-content.sh
Expected:
- Matching items: 25-29 (some minor differences expected)
- Tag associations may differ
- Related items preserved
```

### 2.2.4 Restart MCP Server
```
Note: MCP server must be restarted to use the rebuilt database
Action: Stop and restart the MCP server connection
```

## 2.3 Post-Rebuild Verification

### 2.3.1 Basic Item Verification

```
Tool: get_items
Parameters: {type: "issues", includeClosedStatuses: true}
Expected: Same count as pre-rebuild
```

### 2.3.2 Tag Verification
```
Tool: get_tags
Expected: All tags from markdown files
Note: Deleted tags should not reappear
```

### 2.3.3 Type Verification
```
Tool: get_types
Expected: Custom types preserved
```

### 2.3.4 Content Integrity Check
```
Tool: get_item_detail
Parameters: {type: "issues", id: 1}
Expected: 
- Multi-line content preserved
- Unicode characters intact
- All fields match original
```

### 2.3.5 Session Verification
```
Tool: get_items
Parameters: {type: "sessions"}
Expected: All sessions restored with correct timestamps
```

### 2.3.6 Daily Summary Verification
```
Tool: get_items
Parameters: {type: "dailies"}
Expected: All daily summaries restored
```

## 2.4 Sequence and ID Verification

### 2.4.1 Check ID Sequences

```
Tool: create_item
Parameters: {
  type: "issues",
  title: "Post-Rebuild Issue",
  content: "Testing ID sequence",
  priority: "low",
  status: "Open"
}
Expected: Next sequential ID (not duplicate)
```

### 2.4.2 Verify Special Type Sequences
```
Note: Sessions and dailies should maintain sequence value of 0
```

## 2.5 Search Index Verification

### 2.5.1 Full-text Search Test

```
Tool: search_items
Parameters: {query: "authentication"}
Expected: Same results as before rebuild
```

### 2.5.2 Tag Search Test
```
Tool: search_items_by_tag
Parameters: {tag: "bug"}
Expected: Same items as before rebuild
```

## 2.6 Database Comparison (Alternative Manual Method)

Note: The following manual comparison steps are available if the automated tools are not accessible:

### 2.6.1 File System Comparison
```
Bash: ls -la .shirokuma/data/search.db*
Expected: Both search.db and search.db.backup exist
```

### 2.6.2 Quick Comparison Script
```
Bash: .claude/tools/compare-databases.sh
Expected: Comprehensive comparison report
```

### 2.6.3 Detailed Content Dump
```
Bash: .claude/tools/dump-database-details.sh | less
Expected: Browse detailed database contents
```

## 2.7 Test Completion

### 2.7.1 SQLite Verification Summary
```
Status: Database rebuild and SQLite-level verification complete
Next Step: Server restart required for API testing
Note: Continue with Test Case 2.02 after server restart
```

## Important Notes

- Rebuild reads all markdown files and recreates database
- Deleted items are not restored (only exists in DB)
- Tag associations are rebuilt from markdown
- Search indexes are recreated
- Custom types must exist in sequences table
- Sessions use timestamp IDs (not sequential)
- Dailies use date IDs (not sequential)
- Backup allows rollback if rebuild fails
- Server restart is REQUIRED after rebuild for changes to take effect