# Test Case 12: Current State Management

## 12.1 Initial State
**Test**: Get current state when file doesn't exist
```
mcp__test-knowledge-base__get_current_state()
```
**Expected**: JSON object with empty content and default metadata
```json
{
  "content": "",
  "metadata": {
    "title": "プロジェクト現在状態",
    "type": "current_state",
    "priority": "high",
    "tags": ["system", "state"],
    "related": []
  }
}
```
**Validation**: Returns structured JSON, not just empty string

## 12.2 Update Current State with Metadata
**Test**: Set initial state content with metadata
```
mcp__test-knowledge-base__update_current_state({
  "content": "# Initial Application State\n\n## Configuration\n- **Key**: value\n- **Status**: active\n\n## Metrics\n| Metric | Value |\n|--------|-------|\n| Users  | 100   |\n| Tasks  | 45    |",
  "related": ["issues-1", "docs-1"],
  "tags": ["milestone", "v1.0"],
  "updated_by": "test-user"
})
```
**Expected**: "Current state updated successfully"
**Validation**: Success message returned

## 12.3 Retrieve Current State with Metadata
**Test**: Get the state after update
```
mcp__test-knowledge-base__get_current_state()
```
**Expected**: JSON object with content and metadata
```json
{
  "content": "# Initial Application State\n\n## Configuration\n- **Key**: value\n- **Status**: active\n\n## Metrics\n| Metric | Value |\n|--------|-------|\n| Users  | 100   |\n| Tasks  | 45    |",
  "metadata": {
    "title": "プロジェクト現在状態",
    "type": "current_state",
    "priority": "high",
    "tags": ["milestone", "v1.0"],
    "related": ["issues-1", "docs-1"],
    "updated_at": "2025-XX-XX...",
    "updated_by": "test-user"
  }
}
```
**Validation**: Content and metadata preserved

## 12.4 Update with Invalid Related Items
**Test**: Update state with non-existent related items
```
mcp__test-knowledge-base__update_current_state({
  "content": "# Testing Invalid References",
  "related": ["issues-9999", "docs-1", "invalid-format", "sessions-fake"],
  "tags": ["test"],
  "updated_by": "validator"
})
```
**Expected**: Error with instructions
```
The following related items do not exist: issues-9999, invalid-format, sessions-fake. 
Please create these items first or remove them from the related field. 
Valid items: docs-1
```
**Validation**: Clear error message with AI instructions

## 12.5 Update with Markdown + Code Blocks
**Test**: Update state with Markdown containing code blocks
```
mcp__test-knowledge-base__update_current_state({
  "content": "# Project Status\n\n## Current Configuration\n```json\n{\n  \"version\": \"1.0\",\n  \"settings\": {\n    \"theme\": \"dark\",\n    \"language\": \"ja\"\n  },\n  \"lastUpdate\": \"2025-01-30\"\n}\n```\n\n## Next Steps\n1. Complete feature implementation\n2. Run tests\n3. Deploy to production"
})
```
**Expected**: "Current state updated successfully"
**Validation**: Markdown with code blocks accepted

## 12.6 Retrieve Markdown with Code Blocks
**Test**: Get state with code blocks
```
mcp__test-knowledge-base__get_current_state()
```
**Expected**: JSON with properly escaped content
**Validation**: Code blocks preserved in JSON string format

## 12.7 Tag Auto-Registration Test
**Test**: Update with new tags
```
mcp__test-knowledge-base__update_current_state({
  "content": "# Tag Test",
  "tags": ["auto-tag-1", "auto-tag-2", "existing-tag"]
})
```
**Expected**: "Current state updated successfully"
**Validation**: New tags automatically registered

## 12.8 Verify Tags Were Created
**Test**: Check if new tags exist
```
mcp__test-knowledge-base__get_tags()
```
**Expected**: Response includes "auto-tag-1" and "auto-tag-2"
**Validation**: Tags were auto-registered

## 12.9 Update with Empty Content
**Test**: Clear the state
```
mcp__test-knowledge-base__update_current_state({
  "content": ""
})
```
**Expected**: "Current state updated successfully"
**Validation**: Empty content accepted

## 12.10 Verify Empty State Structure
**Test**: Confirm state structure when empty
```
mcp__test-knowledge-base__get_current_state()
```
**Expected**: JSON object with empty content but metadata intact
```json
{
  "content": "",
  "metadata": {
    "title": "プロジェクト現在状態",
    "type": "current_state",
    "priority": "high",
    "tags": ["system", "state"],
    "related": []
  }
}
```
**Validation**: Structure maintained even with empty content

## 12.11 Unicode Markdown Content Test
**Test**: Update with Unicode characters in Markdown
```
mcp__test-knowledge-base__update_current_state({
  "content": "# 🎯 プロジェクト状態\n\n## 📊 現在のステータス\n- **状態**: アクティブ ✅\n- **优先级**: 高 🔴\n- **Статус**: Активный 🚀\n\n## 📝 タスクリスト\n| タスク | 進捗 | 担当者 |\n|--------|------|--------|\n| 設計 | 完了 | 田中 |\n| 実装 | 進行中 | 李 |\n| Тест | 待機 | Иван |\n\n### 備考\n> 多言語対応のテストケース 🌏",
  "tags": ["unicode", "international"],
  "updated_by": "global-test"
})
```
**Expected**: "Current state updated successfully"
**Validation**: Unicode in Markdown preserved correctly

## 12.12 Final State Verification
**Test**: Get final state with Unicode Markdown
```
mcp__test-knowledge-base__get_current_state()
```
**Expected**: JSON with Unicode content preserved
**Validation**: All Unicode characters and Markdown formatting in JSON format

## Success Criteria
- ✅ Returns JSON object with content and metadata structure
- ✅ Empty state returns JSON with empty content (not empty string)
- ✅ Metadata fields (tags, related, updated_by) work correctly
- ✅ Invalid related items trigger clear error messages
- ✅ Tags are auto-registered when new
- ✅ State updates work with Markdown content
- ✅ Markdown formatting preserved in JSON strings
- ✅ Code blocks in Markdown preserved properly
- ✅ Empty content clears state but maintains structure
- ✅ Unicode characters with emojis preserved
- ✅ Multi-language content supported